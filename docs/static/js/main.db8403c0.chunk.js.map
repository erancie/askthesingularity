{"version":3,"sources":["Response.js","Prompt.js","Speech.js","App.js","index.js"],"names":["Response","props","className","completion","Prompt","openai","OpenAI","process","prompt","speechString","useEffect","handlePromptChange","setPromptState","useState","tokens","promptState","a","complete","engine","maxTokens","gptResponse","data","choices","text","type","name","onChange","event","target","value","preValue","console","log","onClick","SpeechRecognition","window","webkitSpeechRecognition","recognition","Speech","isListening","setIsListening","setText","handleListen","start","onend","stop","onstart","onresult","transcript","Array","from","results","map","result","join","onerror","error","prevState","continuous","interimResults","lang","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAEe,SAASA,EAASC,GAE/B,OACE,sBAAKC,UAAU,gBAAf,UACE,4CACA,qBAAKA,UAAU,aAAf,SAA6BD,EAAME,gBCF1B,SAASC,EAAOH,GAE7B,IACMI,EAAS,IAAIC,IADIC,uDAGnBC,EAASP,EAAMQ,aAEnBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAqB,WACzBC,EAAe,CAACJ,OAAQA,KAG1B,EAAsCK,mBAAS,CAC7CL,OAAQ,GACRM,OAAQ,GACRX,WAAY,KAHd,mBAAOY,EAAP,KAAoBH,EAApB,KAfoC,4CAiCpC,4BAAAI,EAAA,sEAC4BX,EAAOY,SAAS,CACtCC,OAAQ,UACRC,UAAW,GACXX,OAAQO,EAAYP,SAJ1B,OACQY,EADR,OAMER,EAAe,CAACT,WAAYiB,EAAYC,KAAKC,QAAQ,GAAGC,OAN1D,4CAjCoC,sBA0CpC,OACE,sBAAKrB,UAAU,YAAf,UACE,0BAAUA,UAAU,KAAKsB,KAAK,OAAOC,KAAK,SAASC,SAvBlC,SAACC,GACpB,MAAwBA,EAAMC,OAAtBH,EAAR,EAAQA,KAAMI,EAAd,EAAcA,MACdjB,GAAe,SAACkB,GACd,OAAO,2BACFA,GADL,kBAEGL,EAAOI,OAGZE,QAAQC,IAAIP,GACZM,QAAQC,IAAIH,IAciEA,MAAOd,EAAYP,SAC9F,wBAAQN,UAAU,iCAAiCsB,KAAK,SAASS,QA7CjC,2CA6ChC,sBACA,wBACA,cAACjC,EAAD,CAAUG,WAAYY,EAAYZ,gBCjDxC,IAAM+B,EAAoBC,OAAOD,mBAAqBC,OAAOC,wBAC7DL,QAAQC,IAAIE,GACZ,IAAMG,EAAc,IAAIH,EAOT,SAASI,IACtB,MAAuCzB,oBAAS,GAAhD,mBAAO0B,EAAP,KAAoBC,EAApB,KACA,EAAyB3B,mBAAS,MAAlC,mBAAOU,EAAP,KAAakB,EAAb,KAEA/B,qBAAU,WACRgC,MACC,CAACH,IAEJ,IAAMG,EAAe,WAChBH,GACDF,EAAYM,QACZN,EAAYO,MAAQ,WAClBb,QAAQC,IAAI,0BACZK,EAAYM,WAGdN,EAAYQ,OACZR,EAAYO,MAAQ,WAClBb,QAAQC,IAAI,kBAGhBK,EAAYS,QAAU,WACpBf,QAAQC,IAAI,YAEdK,EAAYU,SAAW,SAAApB,GACrB,IAAMqB,EAAaC,MAAMC,KAAKvB,EAAMwB,SACnCC,KAAI,SAAAC,GAAM,OAAIA,EAAO,MACrBD,KAAI,SAAAC,GAAM,OAAIA,EAAOL,cACrBM,KAAK,IACNvB,QAAQC,IAAIgB,GACZP,EAAQO,GACRX,EAAYkB,QAAU,SAAA5B,GACpBI,QAAQC,IAAIL,EAAM6B,UAIxB,OACE,sBAAKtD,UAAU,YAAf,UACE,sBAAKA,UAAU,MAAf,UACE,wBAAQA,UAAU,iCAAiC+B,QAAS,kBAAKO,GAAe,SAAAiB,GAAS,OAAKA,MAA9F,SAA4GlB,EAAyB,OAAX,WACzHA,EAAc,qBAAKrC,UAAU,OAAf,SAAsB,4CAAyB,qBAAKA,UAAU,OAAf,SAAsB,mDAEtF,cAACE,EAAD,CAAQK,aAAcc,OAhD5BQ,QAAQC,IAAIK,GACZA,EAAYqB,YAAa,EACzBrB,EAAYsB,gBAAiB,EAC7BtB,EAAYuB,KAAO,QCGJC,MATf,WACE,OACE,sBAAK3D,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,gDACA,uBAAK,uBACL,cAACoC,EAAD,QCHNwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.db8403c0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Response(props) {\r\n\r\n  return (\r\n    <div className='container p-5'>\r\n      <h2>God Says: </h2>\r\n      <div className='completion'>{props.completion}</div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport OpenAI from 'openai-api';\r\nimport {} from 'dotenv/config';\r\nimport Response from './Response';\r\n\r\nexport default function Prompt(props) {\r\n\r\n  const OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\r\n  const openai = new OpenAI(OPENAI_API_KEY);\r\n  \r\n  let prompt = props.speechString\r\n\r\n  useEffect(()=> {\r\n    handlePromptChange()\r\n  }, [prompt])\r\n\r\n  const handlePromptChange = () => {\r\n    setPromptState({prompt: prompt})\r\n  }\r\n\r\n  const [promptState, setPromptState] = useState({\r\n    prompt: '',\r\n    tokens: 12,\r\n    completion: '',\r\n  })\r\n\r\n  const handleChange = (event)=>{\r\n    const { name, value } = event.target\r\n    setPromptState((preValue)=>{  \r\n      return {\r\n        ...preValue,\r\n        [name]: value\r\n      }\r\n    })\r\n    console.log(name)\r\n    console.log(value)\r\n  }\r\n\r\n  async function sendPrompt() {\r\n    const gptResponse = await openai.complete({\r\n        engine: 'davinci',\r\n        maxTokens: 64,\r\n        prompt: promptState.prompt\r\n    });\r\n    setPromptState({completion: gptResponse.data.choices[0].text})\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <textarea className='in' type=\"text\" name='prompt' onChange={handleChange} value={promptState.prompt}></textarea>\r\n      <button className='btn btn-success btn-lg p-5 m-5' type='button' onClick={sendPrompt} >Complete</button>\r\n      <div></div>\r\n      <Response completion={promptState.completion} />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport Prompt from './Prompt'\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconsole.log(SpeechRecognition)\r\nconst recognition = new SpeechRecognition()\r\nconsole.log(recognition)\r\nrecognition.continuous = true\r\nrecognition.interimResults = true\r\nrecognition.lang = 'en-US'\r\n\r\n\r\nexport default function Speech() {\r\n  const [isListening, setIsListening ] = useState(false)\r\n  const [text, setText ] = useState(null)\r\n\r\n  useEffect(()=>{\r\n    handleListen()\r\n  }, [isListening])\r\n\r\n  const handleListen = () => {\r\n    if(isListening){\r\n      recognition.start()\r\n      recognition.onend = () => {\r\n        console.log('start - onend -- start')\r\n        recognition.start()\r\n      }\r\n    }else {\r\n      recognition.stop()\r\n      recognition.onend = () => {\r\n        console.log('stop - onend')\r\n      }\r\n    }\r\n    recognition.onstart = () => {\r\n      console.log('onstart')\r\n    }\r\n    recognition.onresult = event => {\r\n      const transcript = Array.from(event.results)\r\n      .map(result => result[0])\r\n      .map(result => result.transcript)\r\n      .join('')\r\n      console.log(transcript)\r\n      setText(transcript)\r\n      recognition.onerror = event => {\r\n        console.log(event.error)\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className='container'>\r\n      <div className='box'>\r\n        <button className='btn btn-primary btn-lg p-5 m-5' onClick={()=> setIsListening(prevState => !prevState)}>{!isListening ? 'Listen' : 'Stop'}</button>\r\n        {isListening ? <div className='mb-5'><i>Listening</i></div> : <div className='mb-5'><i>Not Listening</i></div>}\r\n      </div>\r\n      <Prompt speechString={text} />\r\n\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\nimport Speech from './Speech';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className='mt-5 title'>Ask God to complete your sentence.</h1>\n      <br/><br/>\n      <Speech />\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}